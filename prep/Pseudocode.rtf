{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fswiss\fcharset0 Helvetica-BoldOblique;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue0;\red251\green0\blue7;
\red251\green0\blue7;\red25\green60\blue255;}
{\*\expandedcolortbl;;\cssrgb\c0\c1\c1;\cssrgb\c0\c0\c0;\cssrgb\c100000\c12195\c0;
\cssrgb\c100000\c12195\c0;\cssrgb\c12594\c35385\c100000;}
\margl1440\margr1440\vieww37900\viewh19680\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs48 \cf0 \ul \ulc0 STAGE 1: Setup
\f1\b0\fs24 \ulnone \
\

\f0\b\fs36 \cf2 \ul \ulc3 HTML ~
\f1\b0\fs24 \cf4 \ulnone \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs28 \cf4 Initialize the board in HTML and then initialize the starting positions of each piece. I can cycle the same\
image to their appropriate starting positions.\
\
Set up an h1 element that has an id of message. This message will be updated once computer or player wins.\
\
Set up two h2 elements that will keep track of player and computer scores. \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs24 \cf0 \

\f0\b\fs36 \ul JS ~
\f1\b0\fs24 \ulnone \
\

\f0\b\fs28 \ul Initialize variables:\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b0 \cf0 \ulnone \
\cf4 	- numPlayerPieces: This is how many pieces player has captured (first to 12 wins).  0 at first.\
	- numComputerPieces: This is how many pieces computer has captured (first to 12 wins). 0 at first.\
	- numPlayerRemaining: This is how many pieces player has remaining. 12 at first.\
	- numComputerRemaining: This is how many pieces computer has remaining. 12 at first.\
	- currentPlayerIds: This is an array containing all current player ids used. [] at first.\
	- currentComputerIds: This is an array containing all current computer ids used. [] at first.\cf0 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b \cf0 \ul Cache elements from HTML to JS:\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf4 	
\f1\b0 \ulnone - Cache all dark coloured squares under one class (class=\'93active-cells\'94). These are the only ones allowed to be played.\
		- Provide each active dark coloured square with an id.\
		- Obviously those with id\'92s are active or allowed to be played at a time depending on location of the user clicked piece and previous move. \
	- Cache a message element. Maybe something like <h1></h1> and initially do not place anything in it. Since a computer is playing, the computer\
	will make a move regardless of prompt so it will always be \'93your\'94 turn.\
	- Cache Player Score and Computer Score elements.\
	- Cache Reset Game button element.\cf0 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b \cf0 \ul Event listeners:
\f1\b0 \ulnone \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf5 	- Add event listener for each dark square if clicked, however in a function later, you have to prevent certain id\'92s from being played. Pass pieceSelected into dark square.\
\cf0 	- \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b \cf0 \ul Functions:
\f1\b0 \ulnone \
\
	- define 
\f2\i\b \cf6 pieceSelected(event)
\f1\i0\b0 .\cf0  Have an if statement Inside this function, start off with if statement saying something like if current square is NOT empty (innerHTML=\'93\'94) then save id \
	to variable and call pieceMove(id). If an id that cannot be played is clicked, update message element to \'93cannot be played\'94.\
\
	- define: 
\f2\i\b \cf6 computerSelects()
\f1\i0\b0 \cf0 . Computer selects one of the playable ids and then moves according to 
\f2\i\b \cf6 pieceMove()
\f1\i0\b0 \cf0 .\
\
	- define 
\f2\i\b \cf6 pieceMove()
\f1\i0\b0 \cf0 . Inside this function the piece can move diagonally under certain conditions and there must be an if statement seeing if kingPiece is true or false.\
	If true, it can move forward and backwards. If false, it can only move forward. There are obviously other conditions that must be satisfied for a move in general.\
		- A piece cannot move forward if a piece with same color occupies the adjacent diagonal. However, it can hop over the adjacent diagonal if the next one is empty\
		and the adjacent diagonal contains a piece of opposing color. You must also make sure some slots are barred from being played but this can be achieved with\
		the use of ids because only dark coloured squares with ids are played.\
		- Check score using 
\f2\i\b \cf6 checkScore()
\f1\i0\b0 \cf0 .\
		- Reanalyze board using 
\f2\i\b \cf6 analyzeBoard()\cf0 \
\
	
\f1\i0\b0 - define: 
\f2\i\b \cf6 analyzeBoard()\cf0 . 
\f1\i0\b0 Possibly most important function. It will keep a registry of current ids occupied by player and those occupied by computer.\
 \
	- define 
\f2\i\b checkScore()
\f1\i0\b0 . Inside this function, if pieces are acquired either on player or computer side, increment up the player and computer scores. Reduce number of\
	player pieces and computer pieces that are available to be played. If either player or computer have reached 12, switch innerHTML of message to either player or \
	computer wins.\
\
	- define 
\f2\i\b \cf6 kingsRow()
\f1\i0\b0 \cf0 . Check if any piece of a color is in opposing end (based on id). If true, turn kings piece true and alter image to kings piece.\
\
	- define 
\f2\i\b \cf6 resetGame()
\f1\i0\b0 \cf0 . Set all variables to initial values.
\fs24 \
	\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs48 \cf0 \ul STAGE 2: Gameplay and Logic:\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f1\b0\fs28 \cf0 \ulnone \
(1) Player is red by default (goes first). This is just easier to code. Player clicks on single piece. Return playable or not in message \
	depending on 
\f2\i\b \cf6 pieceSelected(event)
\f1\i0\b0 \cf0 .\
\
(2) Computer takes their turn by choosing a playable id at random in 
\f2\i\b \cf6 computerSelects()
\f1\i0\b0 \cf0 .\
\
(3) Check score using 
\f2\i\b \cf6 checkScore()
\f1\i0\b0 \cf0  and analyze board using 
\f2\i\b \cf6 analyzeBoard()
\f1\i0\b0 \cf0 .\
\
(3) Check if any piece is in kings row using 
\f2\i\b \cf6 kingsRow()
\f1\i0\b0 \cf0 , if so turn kings row to true, else return false. Movement of that piece changes.\
\
(4) Player plays again and game continues until either player\'92s or computer\'92s score is 12. 
\fs24 \

\fs28 \
(5) If either player or computer reaches a score of 12, register winner!\
\
(6) Reset game.
\fs24 \
	}